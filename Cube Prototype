var scene = 1; // 1 is splashcreen

var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
};

Button.prototype.draw = function() {
    fill(0, 234, 255);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(0, 0, 0);
    textSize(19);
    textAlign(LEFT, TOP);
    text(this.label, this.x+10, this.y+this.height/4);
};

Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};

var btn1 = new Button({
    x: 100,
    y: 174,
    label: "Start Game",
    onClick: function() {
        scene = 2; //changes the scene to gameplay scene
    }
});

//code for splashScreen
var splashScreen = function(){
    background(255, 0, 0);
    fill(0, 0, 0);
    textSize(30);
    text("Rubik's Cube",80,84);
    textSize(20);
    text("By Shuichi Kameda Almeida and Seth Kadar",120, 130);
    btn1.draw();
    //drawBitmoji(165,273,70);
};


var cubeColors = [color(255, 255, 255), color(255, 0, 0), color(242, 228, 34), color(22, 224, 110), color(0, 0, 255), color(255, 140, 0)];

var currentDirection = 1; // 0 = clockwise, 1 = counter clockwise

var Cube = function(x, y, faceColors) {
    this.x = x;
    this.y = y;
    
    this.size = 25;

    this.color = faceColors;
};

Cube.prototype.draw = function(i, j) {
    
    // Loop over faces property, and draw each cube
    
    var index = 0; 
    for ( var x = 0; x < 3; x++){
        for ( var y = 0; y < 3; y++){
            fill(this.color[y][x]);
            rect(this.x + x * this.size, this.y + y * this.size, this.size, this.size);
            index++;
        }
    }
    
};

Cube.prototype.moveRow = function(otherCube, rowNumber){
    
    // save the row from the other cube
    var tempRow = otherCube.color[rowNumber];
    
    // move our current row to other cube
    otherCube.color[rowNumber] = this.color[rowNumber];
    
    // change our current row to saved copy 
    this.color[rowNumber] = tempRow; 
    
};

Cube.prototype.moveColumn = function(otherCube, colNumberThis, colNumberOther) {
    
    // for loop which goes through each index in the outer array
    for ( var i = 0; i < 3; i++ ) {
        
        // save the column from the other cube
        var tempCol = otherCube.color[i][colNumberOther];
        
        // move our current column to other cube
        otherCube.color[i][colNumberOther] = this.color[i][colNumberThis];
            
        // change our current column to saved column
        this.color[i][colNumberThis] = tempCol;
    }
};

// direction: 0 = clockwise, 1 = counter clockwise
var rotateCube = function(direction, cube){
    // create a blank array for rotated face
    var newColors = [ [], [], [] ];
    
    var rotCorner = [
        [0, 2],
        [2, 0]
        
        ];
    
    // rotate the current faces into the new array (corner pieces)
    newColors[rotCorner[direction][0]][rotCorner[direction][1]] = cube.color[0][0];
    newColors[rotCorner[0][direction]][rotCorner[direction][0]] = cube.color[2][0];
    newColors[rotCorner[1][direction]][rotCorner[direction][0]] = cube.color[2][2];
    newColors[rotCorner[direction][1]][rotCorner[direction][1]] = cube.color[0][2];
    
    // rotates edge pieces
    // clockwise if direction equals 0
    if (direction === 0) {
        newColors[1][2] = cube.color[0][1];
        newColors[2][1] = cube.color[1][2];
        newColors[1][0] = cube.color[2][1];
        newColors[0][1] = cube.color[1][0];
        
    // counter clockwise if direction equals 1
    } else if (direction === 1) {
        newColors[1][0] = cube.color[0][1];
        newColors[2][1] = cube.color[1][0];
        newColors[1][2] = cube.color[2][1];
        newColors[0][1] = cube.color[1][2];
    }
    
    newColors[1][1] = cube.color[1][1];
    
    return newColors; 
    
};

//face 1 is white face, face 2 is orange face, face 3 is yellow face, face 4 is red, face 5 is green, face 6 is blue

Cube.prototype.rotateFront = function(direction, top, left, bottom, right) {
  
  //rotate the cube you're working on
  this.color = rotateCube(direction, this);
  // direction = 0: clockwise; direction = 1: counter clockwise
  if (direction === 1){
      //save left col 
        var leftCol = [left.color[0][2], left.color[1][2], left.color[2][2]];
        
        // rotate top row to left column
        left.color[0][2] = top.color[2][2];
        left.color[1][2] = top.color[2][1];
        left.color[2][2] = top.color[2][0];
        
        //save bottom 
        var bottomRow = [bottom.color[0][0], bottom.color[0][1], bottom.color[0][2]];
        
        // update bottom from saved left column 
        bottom.color[0][0] = leftCol[0];
        bottom.color[0][1] = leftCol[1];
        bottom.color[0][2] = leftCol[2];
        
        //save right col
        var rightCol = [right.color[0][0], right.color[1][0], right.color[2][0]];
        
        // update right column from bottom row
        right.color[0][0] = bottomRow[0];
        right.color[1][0] = bottomRow[1];
        right.color[2][0] = bottomRow[2];
        
        // update top row from right column
        top.color[2][0] = rightCol[0];
        top.color[2][1] = rightCol[1];
        top.color[2][2] = rightCol[2];
    }
    
    // if rotating clockwise
    else if (direction === 0 ) {
        //save left col 
        var leftCol = [left.color[0][2], left.color[1][2], left.color[2][2]];
        
        // rotate top row to left column
        left.color[0][2] = bottom.color[0][0];
        left.color[1][2] = bottom.color[0][1];
        left.color[2][2] = bottom.color[0][2];
        
        //save top 
        var topRow = [top.color[2][0], top.color[2][1], top.color[2][2]];
        
        // update top from saved left column 
        top.color[2][0] = leftCol[0];
        top.color[2][1] = leftCol[1];
        top.color[2][2] = leftCol[2];
        
        //save right col
        var rightCol = [right.color[0][0], right.color[1][0], right.color[2][0]];
        
        // update right column from bottom row
        right.color[0][0] = topRow[0];
        right.color[1][0] = topRow[1];
        right.color[2][0] = topRow[2];
        
        // update top row from right column
        bottom.color[0][0] = rightCol[0];
        bottom.color[0][1] = rightCol[1];
        bottom.color[0][2] = rightCol[2];
        
    }
      
  };
  
  
  Cube.prototype.rotateMiddle = function(direction, top, left, bottom, right) {
  
  // direction = 0: clockwise; direction = 1: counter clockwise
  if (direction === 1){
      //save left col 
        var leftCol = [left.color[0][1], left.color[1][1], left.color[2][1]];
        
        // rotate top row to left column
        left.color[0][1] = top.color[1][0];
        left.color[1][1] = top.color[1][1];
        left.color[2][1] = top.color[1][2];
        
        //save bottom 
        var bottomRow = [bottom.color[1][0], bottom.color[1][1], bottom.color[1][2]];
        
        // update bottom from saved left column 
        bottom.color[1][0] = leftCol[0];
        bottom.color[1][1] = leftCol[1];
        bottom.color[1][2] = leftCol[2];
        
        //save right col
        var rightCol = [right.color[0][1], right.color[1][1], right.color[2][1]];
        
        // update right column from bottom row
        right.color[0][1] = bottomRow[0];
        right.color[1][1] = bottomRow[1];
        right.color[2][1] = bottomRow[2];
        
        // update top row from right column
        top.color[1][0] = rightCol[0];
        top.color[1][1] = rightCol[1];
        top.color[1][2] = rightCol[2];
    }
    
    // if rotating clockwise
    else if (direction === 0 ) {
        //save left col 
        var leftCol = [left.color[0][1], left.color[1][1], left.color[2][1]];
        
        // rotate top row to left column
        left.color[0][1] = bottom.color[1][0];
        left.color[1][1] = bottom.color[1][1];
        left.color[2][1] = bottom.color[1][2];
        
        //save top 
        var topRow = [top.color[1][0], top.color[1][1], top.color[1][2]];
        
        // update top from saved left column 
        top.color[1][0] = leftCol[0];
        top.color[1][1] = leftCol[1];
        top.color[1][2] = leftCol[2];
        
        //save right col
        var rightCol = [right.color[0][1], right.color[1][1], right.color[1][2]];
        
        // update right column from bottom row
        right.color[0][1] = topRow[0];
        right.color[1][1] = topRow[1];
        right.color[1][2] = topRow[2];
        
        // update top row from right column
        bottom.color[1][0] = rightCol[0];
        bottom.color[1][1] = rightCol[1];
        bottom.color[1][2] = rightCol[2];
        
    }
      
  };
    

Cube.prototype.rotateBack = function(direction, top, left, bottom, right) {
    
    // rotate the cube you're working on
    this.color = rotateCube(direction, this); 

    // direction = 0: clockwise; direction = 1: counter clockwise
    // if rotating counter clockwise
    if (direction === 0) {
        
        //save left col 
        var leftCol = [left.color[0][2], left.color[1][2], left.color[2][2]];
        
        // rotate top row to left column
        left.color[0][2] = top.color[0][2];
        left.color[1][2] = top.color[0][1];
        left.color[2][2] = top.color[0][0];
        
        //save bottom 
        var bottomRow = [bottom.color[2][0], bottom.color[2][1], bottom.color[2][2]];
        
        // update bottom from saved left column 
        bottom.color[2][0] = leftCol[0];
        bottom.color[2][1] = leftCol[1];
        bottom.color[2][2] = leftCol[2];
        
        //save right col
        var rightCol = [right.color[0][0], right.color[1][0], right.color[2][0]];
        
        // update right column from bottom row
        right.color[0][0] = bottomRow[0];
        right.color[1][0] = bottomRow[1];
        right.color[2][0] = bottomRow[2];
        
        // update top row from right column
        top.color[0][0] = rightCol[0];
        top.color[0][1] = rightCol[1];
        top.color[0][2] = rightCol[2];
    }
    
    // if rotating clockwise
    else if (direction === 1 ) {
        //save left col 
        var leftCol = [left.color[0][2], left.color[1][2], left.color[2][2]];
        
        // rotate top row to left column
        left.color[0][2] = bottom.color[2][0];
        left.color[1][2] = bottom.color[2][1];
        left.color[2][2] = bottom.color[2][2];
        
        //save top 
        var topRow = [top.color[0][0], top.color[0][1], top.color[0][2]];
        
        // update top from saved left column 
        top.color[0][0] = leftCol[0];
        top.color[0][1] = leftCol[1];
        top.color[0][2] = leftCol[2];
        
        //save right col
        var rightCol = [right.color[0][0], right.color[1][0], right.color[2][0]];
        
        // update right column from bottom row
        right.color[0][0] = topRow[0];
        right.color[1][0] = topRow[1];
        right.color[2][0] = topRow[2];
        
        // update top row from right column
        bottom.color[2][0] = rightCol[0];
        bottom.color[2][1] = rightCol[1];
        bottom.color[2][2] = rightCol[2];
        
    }
};

// Creates instances for new cube faces (6 in total)
var backFace = new Cube(14, 166, [
    [cubeColors[2], cubeColors[0], cubeColors[0]],
    [cubeColors[0], cubeColors[0], cubeColors[0]],
    [cubeColors[0], cubeColors[0], cubeColors[0]],
]);
    
var leftFace = new Cube(105, 166, [
    [cubeColors[5], cubeColors[5], cubeColors[5]],
    [cubeColors[1], cubeColors[5], cubeColors[5]],
    [cubeColors[5], cubeColors[5], cubeColors[5]],
]);

var frontFace = new Cube(208, 166, [
    [cubeColors[1], cubeColors[1], cubeColors[2]],
    [cubeColors[2], cubeColors[2], cubeColors[2]],
    [cubeColors[2], cubeColors[2], cubeColors[2]],
]);
var rightFace = new Cube(316, 166, [
    [cubeColors[1], cubeColors[1], cubeColors[1]],
    [cubeColors[3], cubeColors[1], cubeColors[1]],
    [cubeColors[1], cubeColors[1], cubeColors[1]],
]);
var topFace = new Cube(207, 50, [
    [cubeColors[3], cubeColors[2], cubeColors[3]],
    [cubeColors[3], cubeColors[3], cubeColors[3]],
    [cubeColors[3], cubeColors[3], cubeColors[3]],
]);
var bottomFace = new Cube(207, 280, [
    [cubeColors[4], cubeColors[3], cubeColors[4]],
    [cubeColors[4], cubeColors[4], cubeColors[4]],
    [cubeColors[4], cubeColors[4], cubeColors[4]],
]);

backFace.draw();
leftFace.draw();
frontFace.draw();
rightFace.draw();
topFace.draw();
bottomFace.draw();


// draws arrow
var upArrows = function() {
    for (var i = 0; i < 3; i++) {
        fill(0, 0, 0);
        triangle(260 - (25 * i), 160, 270 - (25 * i), 150, 280 - (25 * i), 160);
    }
};

var downArrows = function() {
    for (var i = 0; i < 3; i++) {
        fill(0, 0, 0);
        triangle(260 - (25 * i), 248, 270 - (25 * i), 258, 280 - (25 * i), 248);
    }
};

var leftArrowsFront = function() {
    for (var i = 0; i < 3; i++) {
        fill(0, 0, 0);
        triangle(190, 230 - (25 * i), 203, 237 - (25 * i), 203, 221 - (25 * i));
    }
};

var leftArrowsTop = function() {
    for (var i = 0; i < 3; i++) {
        fill(0, 0, 0);
        triangle(190, 110 - (25 * i), 203, 98 - (25 * i), 203, 121 - (25 * i));
    }
};

var rightArrowsFront = function() {
    for (var i = 0; i < 3; i++) {
        fill(0, 0, 0);
        triangle(301, 230 - (25 * i), 289, 237 - (25 * i), 289, 221 - (25 * i));
    }
};

var rightArrowsTop = function() {
    for (var i = 0; i < 3; i++) {
        fill(0, 0, 0);
        triangle(298, 110 - (25 * i), 286, 98 - (25 * i), 286, 121 - (25 * i));
    }
};




draw = function() {
    if (scene === 1){
     splashScreen();   
    }
    else if(scene === 2){
    //arrows on initial yellow face
    upArrows();
    downArrows();
    leftArrowsFront();
    rightArrowsFront();
    
    //arrows on initial green face
    leftArrowsTop();
    rightArrowsTop();
    }
};


//----------------------------------------------------------------------------------

mouseClicked = function() {
    
     if (scene === 1){
        btn1.handleMouseClick();
    }
    else if(scene === 2){
    
    // front face - top row: move right
    if (mouseX <= 300 && mouseX >=290 && mouseY <=190 && mouseY >= 170) 
    {
        topFace.color = rotateCube(1, topFace);
        leftFace.moveRow(frontFace, 0);
        backFace.moveRow(leftFace, 0);
        rightFace.moveRow(backFace, 0);
    } 
    
    // front face - top row: move left
    if (mouseX <=205 && mouseX >=190 && mouseY <=190 && mouseY >= 170) 
    {
        topFace.color = rotateCube(0, topFace);
        backFace.moveRow(rightFace, 0);
        leftFace.moveRow(backFace, 0);
        frontFace.moveRow(leftFace, 0);
    }
    
    // front face - right column: move up
    if (mouseX >= 260 && mouseX <= 280 && mouseY >= 150 && mouseY <= 160)
    {
        rightFace.color = rotateCube(0, rightFace);
        bottomFace.moveColumn(backFace, 2, 0);
        backFace.moveColumn(topFace, 0, 2);
        topFace.moveColumn(frontFace, 2, 2);
    }

    // front face - right column: move down
    if (mouseX >= 260 && mouseX <= 280 && mouseY >= 250 && mouseY <= 260)
    {
        rightFace.color = rotateCube(1, rightFace);
        frontFace.moveColumn(topFace, 2, 2);
        topFace.moveColumn(backFace, 2, 0);
        backFace.moveColumn(bottomFace, 0, 2);
    }
    
    // front face - middle column: move up
    if (mouseX >= 235 && mouseX <= 255 && mouseY >= 147 && mouseY <= 160)
    {
        bottomFace.moveColumn(backFace, 1, 1);
        backFace.moveColumn(topFace, 1, 1);
        topFace.moveColumn(frontFace, 1, 1);
    }
    
    // front face - middle column: move down
    if (mouseX >= 235 && mouseX <= 255 && mouseY >= 245 && mouseY <= 255)
    {
        frontFace.moveColumn(topFace, 1, 1);
        topFace.moveColumn(backFace, 1, 1);
        backFace.moveColumn(bottomFace, 1, 1);
    }
    
    // front face - left column: move up
    if (mouseX >= 207 && mouseX <= 230 && mouseY >= 145 && mouseY <= 160)
    {
        leftFace.color = rotateCube(1, leftFace);
        bottomFace.moveColumn(backFace, 0, 2);
        backFace.moveColumn(topFace, 2, 0);
        topFace.moveColumn(frontFace, 0, 0);
    }
    
    // front face - left column: move down
    if (mouseX >= 207 && mouseX <= 230 && mouseY >= 245 && mouseY <= 255)
    {
        leftFace.color = rotateCube(0, leftFace);
        frontFace.moveColumn(topFace, 0, 0);
        topFace.moveColumn(backFace, 0, 2);
        backFace.moveColumn(bottomFace, 2, 0);
    }
    
    // front face - middle row: move right
    if (mouseX >= 285 && mouseX <= 300 && mouseY >= 195 && mouseY <= 210)
    {
        leftFace.moveRow(frontFace, 1);
        backFace.moveRow(leftFace, 1);
        rightFace.moveRow(backFace, 1); 
    }
    
    // front face - middle row: move left
    if (mouseX >= 188 && mouseX <= 203 && mouseY >= 195 && mouseY <= 210)
    {
        backFace.moveRow(rightFace, 1);
        leftFace.moveRow(backFace, 1);
        frontFace.moveRow(leftFace, 1);
    }
    
    // front face - bottom row: move right
    if (mouseX >= 285 && mouseX <= 300 && mouseY >= 220 && mouseY <= 237)
    {
        bottomFace.color = rotateCube(0, bottomFace);
        leftFace.moveRow(frontFace, 2);
        backFace.moveRow(leftFace, 2);
        rightFace.moveRow(backFace, 2); 
    }
    
    // front face - bottom row: move left
    if (mouseX >= 188 && mouseX <= 203 && mouseY >= 220 && mouseY <= 237)
    {
        bottomFace.color = rotateCube(1, bottomFace);
        backFace.moveRow(rightFace, 2);
        leftFace.moveRow(backFace, 2);
        frontFace.moveRow(leftFace, 2);
    }
    
    // front face: rotate clockwise if currentDirection equals 0
    
    // using the top arrows on green face
    
    //click on top left arrow next to green top face
    if(mouseX >= 190 && mouseX <= 204 && mouseY >= 50 && mouseY <= 71){
        //insert functions
        backFace.rotateBack(1, topFace, rightFace, bottomFace, leftFace);     
        
    }
    
    //click on middle left arrow of green face
    if(mouseX >= 190 && mouseX <= 204 && mouseY >= 74 && mouseY <=95){
        topFace.rotateMiddle(1, topFace, leftFace, bottomFace, rightFace);
    }
    
    //click on bottom left arrow of green face
    if(mouseX >= 190 && mouseX <= 204 && mouseY >=100 && mouseY <= 122){
        frontFace.rotateFront(1, topFace, leftFace, bottomFace, rightFace);  
    }
    
    //click on top right arrow on green face
    if(mouseX >= 286 && mouseX <= 298 && mouseY >= 50 && mouseY <= 70){
        backFace.rotateBack(0, topFace, rightFace, bottomFace, leftFace);
    }
    
    //click on middle right arrow of green face
    if(mouseX >= 286 && mouseX <= 298 && mouseY >= 76 && mouseY <= 96){
        topFace.rotateMiddle(0, topFace, leftFace, bottomFace, rightFace);
    }
    
    //click on bottom right arrow of green face
    if(mouseX >= 286 && mouseX <= 298 && mouseY >= 102 && mouseY <= 122){
        frontFace.rotateFront(0, topFace, leftFace, bottomFace, rightFace); 
    }
    
    backFace.draw();
    leftFace.draw();
    frontFace.draw();
    rightFace.draw();
    topFace.draw();
    bottomFace.draw();
    }
};
