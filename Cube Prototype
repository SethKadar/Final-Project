var cubeColors = [color(255, 255, 255), color(255, 0, 0), color(242, 228, 34), color(22, 224, 110), color(0, 0, 255), color(255, 140, 0)];

var rows = 3; //number of rows
var columns = 3; //number of columns

var Cube = function(x, y, faceColors) {
    this.x = x;
    this.y = y;
    
    this.size = 25;

    this.color = faceColors;
};

Cube.prototype.draw = function(i, j) {
    
    // Loop over faces property, and draw each cube
    
    var index = 0; 
    for ( var x = 0; x < 3; x++){
        for ( var y = 0; y < 3; y++){
            fill(this.color[y][x]);
            rect(this.x + x * this.size, this.y + y * this.size, this.size, this.size);
            index++;
        }
    }
    
    // fill(this.color);
    // rect(this.x + (20 * i), this.y + (20 * j), 20, 20);
};

Cube.prototype.moveRow = function(otherCube, rowNumber){
    
    // save the row from the other cube
    var tempRow = otherCube.color[rowNumber];
    
    // move our current row to other cube
    otherCube.color[rowNumber] = this.color[rowNumber];
    
    // change our current row to saved copy 
    this.color[rowNumber] = tempRow; 
    
};

Cube.prototype.moveColumnDown = function(otherCube, colNumberThis, colNumberOther) {
    
    // for loop which goes through each index in the outer array
    for ( var i = 0; i < 3; i++ ) {
        
        // save the column from the other cube
        var tempCol = otherCube.color[i][colNumberOther];
        
        // move our current column to other cube
        otherCube.color[i][colNumberOther] = this.color[i][colNumberThis];
            
        // change our current column to saved column
        this.color[i][colNumberThis] = tempCol;
    }
};

Cube.prototype.moveColumnUp = function(otherCube, colNumberThis, colNumberOther) {
    
    // for loop which goes through each index in the outer array
    for ( var i = 2; i < 3; i-- ) {
        
        // save the column from the other cube
        var tempCol = otherCube.color[i][colNumberOther];
        
        // move our current column to other cube
        otherCube.color[i][colNumberOther] = this.color[i][colNumberThis];
            
        // change our current column to saved column
        this.color[i][colNumberThis] = tempCol;
    }
};

// direction: 0 = clockwise, 1 = counter clockwise
var rotateCube = function(direction, cube){
    // create a blank array for rotated face
    var newColors = [ [], [], [] ];
    
    var rotCorner = [
        [0, 2],
        [2, 0]
        
        ];
    
    // rotate the current faces into the new array (corner pieces)
    newColors[rotCorner[direction][0]][rotCorner[direction][1]] = cube.color[0][0];
    newColors[rotCorner[0][direction]][rotCorner[direction][0]] = cube.color[2][0];
    newColors[rotCorner[1][direction]][rotCorner[direction][0]] = cube.color[2][2];
    newColors[rotCorner[direction][1]][rotCorner[direction][1]] = cube.color[0][2];
    
    // rotates edge pieces
    // clockwise if direction equals 0
    if (direction === 0) {
        newColors[1][2] = cube.color[0][1];
        newColors[2][1] = cube.color[1][2];
        newColors[1][0] = cube.color[2][1];
        newColors[0][1] = cube.color[1][0];
        
    // counter clockwise if direction equals 1
    } else if (direction === 1) {
        newColors[1][0] = cube.color[0][1];
        newColors[2][1] = cube.color[1][0];
        newColors[1][2] = cube.color[2][1];
        newColors[0][1] = cube.color[1][2];
    }
    
    newColors[1][1] = cube.color[1][1];
    
    return newColors; 
    
};

//face 1 is white face, face 2 is orange face, face 3 is yellow face, face 4 is red, face 5 is green, face 6 is blue

Cube.prototype.rotate1 = function(direction, top, left, bottom, right) {
  
  //rotate the cube you're working on
  this.color = rotateCube(direction, this);
  // direction = 0: clockwise; direction = 1: counter clockwise
  if (direction === 1){
      //save left col 
        var leftCol = [left.color[0][2], left.color[1][2], left.color[2][2]];
        
        // rotate top row to left column
        left.color[0][2] = top.color[0][2];
        left.color[1][2] = top.color[0][1];
        left.color[2][2] = top.color[0][0];
        
        //save bottom 
        var bottomRow = [bottom.color[2][0], bottom.color[2][1], bottom.color[2][2]];
        
        // update bottom from saved left column 
        bottom.color[2][0] = leftCol[0];
        bottom.color[2][1] = leftCol[1];
        bottom.color[2][2] = leftCol[2];
        
        //save right col
        var rightCol = [right.color[0][0], right.color[1][0], right.color[2][0]];
        
        // update right column from bottom row
        right.color[0][0] = bottomRow[0];
        right.color[1][0] = bottomRow[1];
        right.color[2][0] = bottomRow[2];
        
        // update top row from right column
        top.color[0][0] = rightCol[0];
        top.color[0][1] = rightCol[1];
        top.color[0][2] = rightCol[2];
    }
    
    // if rotating clockwise
    else if (direction === 0 ) {
        //save left col 
        var leftCol = [left.color[0][2], left.color[1][2], left.color[2][2]];
        
        // rotate top row to left column
        left.color[0][2] = bottom.color[0][0];
        left.color[1][2] = bottom.color[0][1];
        left.color[2][2] = bottom.color[0][2];
        
        //save top 
        var topRow = [top.color[2][0], top.color[2][1], top.color[2][2]];
        
        // update top from saved left column 
        top.color[2][0] = leftCol[0];
        top.color[2][1] = leftCol[1];
        top.color[2][2] = leftCol[2];
        
        //save right col
        var rightCol = [right.color[0][0], right.color[1][0], right.color[2][0]];
        
        // update right column from bottom row
        right.color[0][0] = topRow[0];
        right.color[1][0] = topRow[1];
        right.color[2][0] = topRow[2];
        
        // update top row from right column
        bottom.color[0][0] = rightCol[0];
        bottom.color[0][1] = rightCol[1];
        bottom.color[0][2] = rightCol[2];
        
    }
      
  };
    
/*Cube.prototype.rotate2 = function(direction, top, left, bottom, right) {
    //rotate the cube you're working on
  this.color = rotateCube(direction, this);
  // direction = 0: clockwise; direction = 1: counter clockwise
  if (direction === 1){
    //save left col 
        var leftCol = [left.color[0][2], left.color[1][2], left.color[2][2]];
        
        // rotate top row to left column
        left.color[0][2] = bottom.color[0][0];
        left.color[1][2] = bottom.color[0][1];
        left.color[2][2] = bottom.color[0][2];
        
    
};
*/

Cube.prototype.rotate3 = function(direction, top, left, bottom, right) {
    
    // rotate the cube you're working on
    this.color = rotateCube(direction, this); 

    // direction = 0: clockwise; direction = 1: counter clockwise
    // if rotating counter clockwise
    if (direction === 1) {
        
        //save left col 
        var leftCol = [left.color[0][2], left.color[1][2], left.color[2][2]];
        
        // rotate top row to left column
        left.color[0][2] = top.color[2][2];
        left.color[1][2] = top.color[2][1];
        left.color[2][2] = top.color[2][0];
        
        //save bottom 
        var bottomRow = [bottom.color[0][0], bottom.color[0][1], bottom.color[0][2]];
        
        // update bottom from saved left column 
        bottom.color[0][0] = leftCol[0];
        bottom.color[0][1] = leftCol[1];
        bottom.color[0][2] = leftCol[2];
        
        //save right col
        var rightCol = [right.color[0][0], right.color[1][0], right.color[2][0]];
        
        // update right column from bottom row
        right.color[0][0] = bottomRow[0];
        right.color[1][0] = bottomRow[1];
        right.color[2][0] = bottomRow[2];
        
        // update top row from right column
        top.color[2][0] = rightCol[0];
        top.color[2][1] = rightCol[1];
        top.color[2][2] = rightCol[2];
    }
    
    // if rotating clockwise
    else if (direction === 0 ) {
        //save left col 
        var leftCol = [left.color[0][2], left.color[1][2], left.color[2][2]];
        
        // rotate top row to left column
        left.color[0][2] = bottom.color[0][0];
        left.color[1][2] = bottom.color[0][1];
        left.color[2][2] = bottom.color[0][2];
        
        //save top 
        var topRow = [top.color[2][0], top.color[2][1], top.color[2][2]];
        
        // update top from saved left column 
        top.color[2][0] = leftCol[0];
        top.color[2][1] = leftCol[1];
        top.color[2][2] = leftCol[2];
        
        //save right col
        var rightCol = [right.color[0][0], right.color[1][0], right.color[2][0]];
        
        // update right column from bottom row
        right.color[0][0] = topRow[0];
        right.color[1][0] = topRow[1];
        right.color[2][0] = topRow[2];
        
        // update top row from right column
        bottom.color[0][0] = rightCol[0];
        bottom.color[0][1] = rightCol[1];
        bottom.color[0][2] = rightCol[2];
        
    }
};

// Creates instances for new cube faces (6 in total)
var testCube = new Cube(14, 166, [
    [cubeColors[2], cubeColors[0], cubeColors[0]],
    [cubeColors[0], cubeColors[0], cubeColors[0]],
    [cubeColors[0], cubeColors[0], cubeColors[0]],
]);
    
var testCube2 = new Cube(105, 166, [
    [cubeColors[5], cubeColors[5], cubeColors[5]],
    [cubeColors[1], cubeColors[5], cubeColors[5]],
    [cubeColors[5], cubeColors[5], cubeColors[5]],
]);

var testCube3 = new Cube(208, 166, [
    [cubeColors[1], cubeColors[1], cubeColors[2]],
    [cubeColors[2], cubeColors[2], cubeColors[2]],
    [cubeColors[2], cubeColors[2], cubeColors[2]],
]);
var testCube4 = new Cube(316, 166, [
    [cubeColors[1], cubeColors[1], cubeColors[1]],
    [cubeColors[3], cubeColors[1], cubeColors[1]],
    [cubeColors[1], cubeColors[1], cubeColors[1]],
]);
var testCube5 = new Cube(207, 50, [
    [cubeColors[3], cubeColors[3], cubeColors[3]],
    [cubeColors[3], cubeColors[3], cubeColors[3]],
    [cubeColors[3], cubeColors[3], cubeColors[3]],
]);
var testCube6 = new Cube(207, 280, [
    [cubeColors[4], cubeColors[4], cubeColors[4]],
    [cubeColors[4], cubeColors[4], cubeColors[4]],
    [cubeColors[4], cubeColors[4], cubeColors[4]],
]);

testCube.draw();
testCube2.draw();
testCube3.draw();
testCube4.draw();
testCube5.draw();
testCube6.draw();


// draws arrow
var upArrows = function() {
    for (var i = 0; i < 3; i++) {
        fill(0, 0, 0);
        triangle(260 - (25 * i), 160, 270 - (25 * i), 150, 280 - (25 * i), 160);
    }
};

var downArrows = function() {
    for (var i = 0; i < 3; i++) {
        fill(0, 0, 0);
        triangle(260 - (25 * i), 248, 270 - (25 * i), 258, 280 - (25 * i), 248);
    }
};

var leftArrows = function() {
    for (var i = 0; i < 3; i++) {
        fill(0, 0, 0);
        triangle(190, 230 - (25 * i), 203, 237 - (25 * i), 203, 221 - (25 * i));
    }
};

var rightArrows = function() {
    for (var i = 0; i < 3; i++) {
        fill(0, 0, 0);
        triangle(301, 230 - (25 * i), 289, 237 - (25 * i), 289, 221 - (25 * i));
    }
};



draw = function() {
    upArrows();
    downArrows();
    leftArrows();
    rightArrows();
};


//----------------------------------------------------------------------------------

mouseClicked = function() {
    //click on bottom right arrow of face 3
    println(mouseX + "," + mouseY);
    if(mouseX >= 260 && mouseX <= 280 && mouseY >= 250 && mouseY <= 260)
    {
        testCube4.color = rotateCube(1, testCube4);
        testCube3.moveColumnDown(testCube5, 2, 2);
        testCube5.moveColumnDown(testCube, 2, 0);
        testCube.moveColumnDown(testCube6, 0, 2);
        
    }
    
    //click on top right arrow of face 3
    if(mouseX >= 260 && mouseX <= 280 && mouseY >= 150 && mouseY <= 160)
    {
        testCube6.moveColumnDown(testCube, 2, 0);
        testCube.moveColumnDown(testCube5, 0, 2);
        testCube5.moveColumnDown(testCube3, 2, 2);
    }

//moves top row of front face to right
    
    if (mouseX <= 300 && mouseX >=290 && mouseY <=190 && mouseY >= 170) {
    testCube2.moveRow(testCube3,0);
    testCube.moveRow(testCube2,0);
    testCube4.moveRow(testCube,0);
    }
    
    //moves top row of front face to the left
    
    if (mouseX <=205 && mouseX >=190 && mouseY <=190 && mouseY >= 170){
        testCube.moveRow(testCube4,0);
        testCube2.moveRow(testCube,0);
        testCube3.moveRow(testCube2,0);
    /*testCube3.moveRow(testCube2,0);
    testCube2.moveRow(testCube,0);
    testCube.moveRow(testCube4,0);*/
    }
    

    
    
    //moves top row of front face to right
    
    // if (mouseY <= 200) {
    // testCube2.moveRow(testCube3,0);
    // testCube.moveRow(testCube2,0);
    // testCube4.moveRow(testCube,0);
    // testCube.draw();
    // testCube2.draw();
    // testCube3.draw();
    // testCube4.draw();
    // }
    
    //---------------------------------
    
    //moves right column of front face
   
   /* 
    if (mouseY >= 300) {
    testCube.moveColumn(testCube6, 0, 2);
    testCube6.moveColumn(testCube3, 2, 2);
    testCube3.moveColumn(testCube5, 2, 2);
    testCube.draw();
    testCube3.draw();
    testCube5.draw();
    testCube6.draw();
    }
    
    */
    
    //---------------------------------
    
    //testCube3.rotate3(1, testCube5, testCube2, testCube6, testCube4);
    
    //testCube.rotate1(1, testCube5, testCube4, testCube6, testCube2);
    
    testCube.draw();
    testCube2.draw();
    testCube3.draw();
    testCube4.draw();
    testCube5.draw();
    testCube6.draw();
    
};
